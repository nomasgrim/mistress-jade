{
  "name": "mocha-sinon",
  "version": "1.0.0",
  "keywords": [
    "mocha",
    "sinon",
    "spies"
  ],
  "description": "mocha integration for sinon",
  "main": "mocha-sinon.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/elliotf/mocha-sinon.git"
  },
  "author": {
    "name": "Elliot Foster"
  },
  "license": "MIT",
  "devDependencies": {
    "chai": "~1.4.2"
  },
  "dependencies": {
    "mocha": "~1.8.1",
    "sinon": "~1.6"
  },
  "readme": "mocha-sinon\n====================\n\n[![Build Status](https://secure.travis-ci.org/elliotf/mocha-sinon.png)](http://travis-ci.org/elliotf/mocha-sinon)\n\nIntegration between mocha and sinon, allowing for automatic cleanup of spies\n\n## Installation\n\nvia npm:\n\n    $ npm install --save-dev mocha-sinon\n\n## Usage\n\n### Server-side\n\nRequire it somewhere in your spec helper file (easier, better)\n\n    require('mocha-sinon');\n\nor in your mocha command line\n\n    $ mocha -R mocha-sinon test.js\n\n### Browser-side\n\nSource the mocha-sinon file after you have sourced mocha and sinon\n\n## Example\n\n    var child_process = require('child_process')\n      , events        = require('events')\n      , chai          = require('chai')\n      , expect        = chai.expect\n    ;\n\n    chai.use(require('sinon-chai'));\n    require('mocha-sinon');\n\n    describe('a shell command', function(){\n      beforeEach(function(){\n        var fakeChild = this.fakeChild = {\n          stdout: new events.EventEmitter()\n        };\n\n        this.sinon.stub(child_process, 'spawn', function(){\n          return fakeChild;\n        });\n      });\n\n      it('gets called', function(done){\n        someFunction(function(err){\n          expect(child_process.spawn).to.have.been.calledWith('/usr/bin/env', ['rm', '-rf', '/']);\n        });\n      });\n    });\n\n## If you don't like this module\n\nThis module is stupidly simple.  You can do it yourself with:\n\n    var sinon = require('sinon');\n\n    beforeEach(function() {\n      this.sinon = sinon.sandbox.create();\n    });\n\n    afterEach(function(){\n      this.sinon.restore();\n    });\n",
  "_id": "mocha-sinon@1.0.0",
  "_from": "mocha-sinon@~1.0.0"
}
