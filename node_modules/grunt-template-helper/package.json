{
  "name": "grunt-template-helper",
  "description": "Grunt template processor and wrapper.",
  "version": "0.1.5",
  "homepage": "https://github.com/ciddan/grunt-template-helper",
  "author": {
    "name": "Mikael Selander",
    "email": "ciddan@gmail.com"
  },
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/ciddan/grunt-template-helper.git"
  },
  "bugs": {
    "url": "https://github.com/ciddan/grunt-template-helper/issues"
  },
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "grunt-lib-contrib": "~0.4.0",
    "prettydiff": "~0.0.133"
  },
  "devDependencies": {
    "grunt": "0.4.x",
    "grunt-coffeelint": ">= 0.0.4",
    "grunt-contrib-clean": "0.4.0rc6",
    "grunt-contrib-coffee": "0.4.0rc7",
    "chai": ">= 1.5.x"
  },
  "_id": "grunt-template-helper@0.1.5",
  "_from": "grunt-template-helper@~0.1.5",
  "keywords": [
    "gruntplugin",
    "grunttemplate",
    "wrap",
    "template",
    "minify",
    "html"
  ],
  "readme": "# grunt-template-helper\n\n**Super simple grunt template processor and wrapper.**\n\n## Installation\n\nInstall npm package, next to your projects `Grunfile`:\n\n    npm install grunt-template-helper\n\nAdd this line to your project's `Gruntfile`:\n\n    grunt.loadNpmTasks('grunt-template-helper');\n\n\n## Template task\n_Run this task with the `grunt template` command._\n\n_This task is a [multi task][] so any targets, files and options should be specified according to the [multi task][] documentation._\n[multi task]: https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n\n_This plugin is only compatible with Grunt `0.4.x`._\n\n### Options\n\n#### data\nData to pass in to the template\nType: `Object`\nDefault: `{}`\n\n#### wrap\nWrap the template with a banner and footer.\nType: `Object`\nDefault: `{}`\n\nIt is possible to inject file-path related data into the banner or footer of the wrapper. This is useful if you're wrapping your template with a script-tag, such as `<script type=\"text/ng-template\" src=\"path/of/view.html\">`. At the moment there are two values that are available to inject: `'src'` and `'dest'`. `'src'` represents the path to the template file, `'dest'` the path to the processed output file. The injection points are specified using positional markers, as such: `foo #{0} bar #{1}`.\n\nShould you want to remove any part of the `'src'` or `'dest'` paths you can do so by specifying the `rem` property.\n\nAdditionally, you can substring replace any number of parts of the injected string by specifying the `repl` property as a list of key/value pairs.\n\n#### minify\nMinifies the processed template.\nType: `Object`\nDefault `{}`\n\nNote that minification occurs last in the process, meaning that, unlike wrapping, any concatenation occurrs before minification. Uses [prettydiff](http://prettydiff.com/) for minification. You can either just provide the value `mode: 'html'` for default html minification, or provide a full prettydiff config object `pretty`. See the [official documentation](http://prettydiff.com/documentation.xhtml#function_properties) to see what's available. The example configuration below includes the settings that are used for html minification.\n\n### Usage Examples\n\n```js\ntemplate: {\n  dev: {\n    options: {\n      data: {\n        env: 'dev',\n        message: 'hello'\n      },\n      wrap: {\n        banner: '<script type=\"text/ng-template\" from=\"#{0}\" to=\"#{1}\"></script>',\n        footer: '</script>',\n        inject: [{\n            prop: 'src'\n          }, {\n            prop: 'dest',\n            rem:  '/unwanted/path',\n            repl: {\n              \".wrongExtension\": \".rightExtension\"\n          }\n        }]\n      },\n      minify: {\n        mode: 'html',\n        // Note that this is redundant, mode: 'html' does the same thing.\n        pretty: {\n          mode: 'minify',\n          lang: 'markup',\n          html: 'html-yes'\n        }\n      }\n    },\n    files: \n      'path/to/result.html': 'path/to/input.template',\n      'path/to/another.html': ['path/to/more/*.template', 'path/to/even/more/*.template'] // concatenates (individually wrapped) files\n  }\n}\n```\n"
}
